name: Promote Release

on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  build-release-artifacts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for release notes generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install release notes dependencies
        run: |
          cd tools/release-notes
          npm install

      - name: Generate release notes
        # Run on tag pushes (v*) and optionally on main if a connection string secret is present
        if: (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') && secrets.RELEASE_NOTES_DB_CONN != ''
        env:
          RELEASE_NOTES_CONN: ${{ secrets.RELEASE_NOTES_DB_CONN }}
        run: |
          cd tools/release-notes
          npm run gen

      - name: Determine release notes availability
        id: notes
        run: |
          if [ -f "tools/release-notes/REL_${{ github.run_id }}.md" ]; then
            echo "has_notes=true" >> $GITHUB_OUTPUT
          else
            echo "has_notes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create migration artifact
        run: |
          mkdir -p release-artifacts
          cp -r migrations release-artifacts/
          cp -r flyway release-artifacts/
          cp -r policy release-artifacts/
          # Stage to a temp directory to avoid tar reading files that are being written
          STAGING_DIR="/tmp/release-artifacts-staging"
          rm -rf "$STAGING_DIR"
          mkdir -p "$STAGING_DIR"
          cp -a release-artifacts/. "$STAGING_DIR/"
          tar -czf release-artifacts/db-migrations-${{ github.sha }}.tar.gz -C "$STAGING_DIR" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: migration-package-${{ github.sha }}
          path: release-artifacts/
          retention-days: 90

      - name: Create GitHub Release (with notes)
        if: startsWith(github.ref, 'refs/tags/v') && steps.notes.outputs.has_notes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Database Migration ${{ github.ref_name }}
          body_path: tools/release-notes/REL_${{ github.run_id }}.md
          draft: false
          prerelease: false

      - name: Create GitHub Release (no notes)
        if: startsWith(github.ref, 'refs/tags/v') && steps.notes.outputs.has_notes != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Database Migration ${{ github.ref_name }}
          body: |
            Database migration release for ${{ github.ref_name }}.
            Release notes were not generated (missing RELEASE_NOTES_DB_CONN secret or generation skipped).
          draft: false
          prerelease: false

      - name: Notify deployment ready
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Migration package built and ready for deployment"
          echo "Artifact: migration-package-${{ github.sha }}"
          echo "SHA: ${{ github.sha }}"
