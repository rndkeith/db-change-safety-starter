name: Promote Release

on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  build-release-artifacts:
    runs-on: ubuntu-latest
    env:
      # Expose the secret as an environment variable accessible to step conditions
      RELEASE_NOTES_CONN: ${{ secrets.RELEASE_NOTES_DB_CONN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for release notes generation

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install release notes dependencies
        run: |
          cd tools/release-notes
          npm ci

      - name: Generate release notes
        # Run on tag pushes (v*) and optionally on main if a connection string env is present
        if: ${{ (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main') && env.RELEASE_NOTES_CONN != '' }}
        run: |
          cd tools/release-notes
          echo "Attempting to generate release notes..."
          # Use the improved script that handles missing flyway_schema_history table
          if npm run gen; then
            echo "Release notes generated successfully"
            echo "RELEASE_NOTES_GENERATED=true" >> $GITHUB_ENV
          else
            echo "Release notes generation failed, but continuing with deployment..."
            echo "This might be the first deployment where flyway_schema_history doesn't exist yet."
            echo "RELEASE_NOTES_GENERATED=false" >> $GITHUB_ENV
            
            # Create a fallback release note without heredoc to avoid YAML delimiter issues
            DEST="$GITHUB_WORKSPACE/tools/release-notes/REL_${{ github.run_id }}.md"
            DATE="$(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            {
              echo "# Database Release Notes - First Deployment"
              echo
              echo "**Generated:** $DATE"
              echo "**Generated By:** github-actions"
              echo "**Environment:** production"
              echo
              echo "> [FIRST DEPLOYMENT NOTICE]: This appears to be the initial deployment to this environment."
              echo "> Release notes could not be generated from database history as flyway_schema_history table does not exist yet."
              echo
              echo "## Release Summary"
              echo
              echo "This deployment will apply all available migrations to initialize the database schema."
              echo
              echo "## Safety Information"
              echo
              echo "### First Deployment Checklist"
              echo "- [ ] Database backup strategy is in place"
              echo "- [ ] All required database users and permissions are configured"
              echo "- [ ] Connection pooling and timeout settings are appropriate"
              echo "- [ ] Monitoring and alerting are configured"
              echo "- [ ] Rollback procedures are understood and tested"
              echo
              echo "### Post-Deployment Verification"
              echo "- [ ] Verify flyway_schema_history table was created"
              echo "- [ ] Confirm all migrations applied successfully"
              echo "- [ ] Test application connectivity and basic functionality"
              echo
              echo '**For detailed migration information, refer to files in the `migrations/` directory.**'
            } > "$DEST"
            
            echo "Fallback release notes created at $DEST"
            echo "RELEASE_NOTES_GENERATED=true" >> $GITHUB_ENV
          fi

      - name: Determine release notes availability
        id: notes
        run: |
          if [ -f "tools/release-notes/REL_${{ github.run_id }}.md" ]; then
            echo "has_notes=true" >> $GITHUB_OUTPUT
            echo "notes_path=tools/release-notes/REL_${{ github.run_id }}.md" >> $GITHUB_OUTPUT
          else
            echo "has_notes=false" >> $GITHUB_OUTPUT
            echo "notes_path=" >> $GITHUB_OUTPUT
          fi

      - name: Create migration artifact
        run: |
          mkdir -p release-artifacts
          cp -r migrations release-artifacts/
          cp -r flyway release-artifacts/
          cp -r policy release-artifacts/
          
          # Include release notes if they were generated
          if [ "${{ steps.notes.outputs.has_notes }}" == "true" ]; then
            cp "${{ steps.notes.outputs.notes_path }}" release-artifacts/RELEASE_NOTES.md
          fi
          
          # Stage to a temp directory to avoid tar reading files that are being written
          STAGING_DIR="/tmp/release-artifacts-staging"
          rm -rf "$STAGING_DIR"
          mkdir -p "$STAGING_DIR"
          cp -a release-artifacts/. "$STAGING_DIR/"
          tar -czf release-artifacts/db-migrations-${{ github.sha }}.tar.gz -C "$STAGING_DIR" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: migration-package-${{ github.sha }}
          path: release-artifacts/
          retention-days: 90

      - name: Create GitHub Release (with notes)
        if: startsWith(github.ref, 'refs/tags/v') && steps.notes.outputs.has_notes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Database Migration ${{ github.ref_name }}
          body_path: ${{ steps.notes.outputs.notes_path }}
          draft: false
          prerelease: false

      - name: Create GitHub Release (no notes)
        if: startsWith(github.ref, 'refs/tags/v') && steps.notes.outputs.has_notes != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Database Migration ${{ github.ref_name }}
          body: |
            Database migration release for ${{ github.ref_name }}.
            
            [Note]: Release notes could not be generated automatically. This might be the first deployment to this environment where the flyway_schema_history table doesn't exist yet.
            
            Please refer to the migration files in the artifacts for details about the changes being deployed.
          draft: false
          prerelease: false

      - name: Notify deployment ready
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Migration package built and ready for deployment"
          echo "Artifact: migration-package-${{ github.sha }}"
          echo "SHA: ${{ github.sha }}"
          echo "Release notes generated: ${{ env.RELEASE_NOTES_GENERATED }}"
